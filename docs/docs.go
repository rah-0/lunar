// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns 200 OK when the service is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "description": "Process a rocket message envelope",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Process a rocket message",
                "parameters": [
                    {
                        "description": "Message envelope",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Envelope"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Message accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rockets": {
            "get": {
                "description": "Get a list of all rockets, optionally sorted by specified field and order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rockets"
                ],
                "summary": "List all rockets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort field (e.g., 'id', 'speed', 'type', 'mission', 'status')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order ('asc' or 'desc')",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rocket summaries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RocketSummary"
                            }
                        }
                    }
                }
            }
        },
        "/rockets/{id}": {
            "get": {
                "description": "Retrieve the complete rocket object including all its properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rockets"
                ],
                "summary": "Get rocket by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rocket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete rocket object",
                        "schema": {
                            "$ref": "#/definitions/models.RocketState"
                        }
                    },
                    "404": {
                        "description": "Rocket not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Envelope": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message content with all possible fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MessageContent"
                        }
                    ]
                },
                "metadata": {
                    "description": "Message metadata as a nested structure",
                    "type": "object",
                    "properties": {
                        "channel": {
                            "type": "string"
                        },
                        "messageNumber": {
                            "type": "integer"
                        },
                        "messageTime": {
                            "type": "string"
                        },
                        "messageType": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "models.MessageContent": {
            "type": "object",
            "properties": {
                "by": {
                    "description": "RocketSpeedIncreased/RocketSpeedDecreased fields",
                    "type": "integer"
                },
                "launchSpeed": {
                    "type": "integer"
                },
                "mission": {
                    "type": "string"
                },
                "newMission": {
                    "description": "RocketMissionChanged fields",
                    "type": "string"
                },
                "reason": {
                    "description": "RocketExploded fields",
                    "type": "string"
                },
                "type": {
                    "description": "RocketLaunched fields",
                    "type": "string"
                }
            }
        },
        "models.RocketState": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Time when the rocket was first launched",
                    "type": "string"
                },
                "exploded": {
                    "description": "Whether the rocket has exploded",
                    "type": "boolean"
                },
                "id": {
                    "description": "Same as the channel ID",
                    "type": "string"
                },
                "mission": {
                    "description": "Current mission",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason for explosion, if applicable",
                    "type": "string"
                },
                "speed": {
                    "description": "Current speed",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of rocket (e.g., \"Falcon-9\")",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Last updated time",
                    "type": "string"
                }
            }
        },
        "models.RocketSummary": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mission": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
